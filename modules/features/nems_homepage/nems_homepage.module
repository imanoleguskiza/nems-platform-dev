<?php
/**
 * @file
 * Code for the NEMS core feature.
 */

include_once 'nems_homepage.features.field_base.inc';
include_once 'nems_homepage.features.inc';
include_once 'nems_homepage.api.inc';

/**
 * Implements hook_menu().
 */
function nems_homepage_menu() {
  $items = array();
  // Empty home page.
  $items['home'] = array(
    'title' => '',
    'page callback' => '_nems_homepage_empty',
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_help().
 */
function nems_homepage_help($path, $arg) {
  $help = '';
  switch ($path) {
    // Help text for the nems_homepage feature.
    case 'admin/help#nems_homepage':
      $help = '<p></p>';
      break;
  }

  return $help;
}

/**
 * Implements hook_node_view().
 */
function nems_homepage_node_view($node, $view_mode, $langcode) {
  switch ($node->type) {
    case 'nems_news':
      menu_tree_set_path('main-menu', 'news');
      break;

    case 'nems_event':
      menu_tree_set_path('main-menu', 'events');
      break;

    case 'nems_publication':
      menu_tree_set_path('main-menu', 'publications');
      break;

    case 'nems_video':
      menu_tree_set_path('videos');
      break;
  }
}

/**
 * Empty Callback for the home page.
 */
function nems_homepage_empty() {
  return '';
}

/**
 * Create default pages.
 */
function _nems_homepage_create_default_pages() {

  $page = array(
    'title' => t('Homepage'),
    'path' => 'home',
    'type' => 'nems_homepage',
  );
  _nems_homepage_create_node($page['type'], $page['title'], $page['path']);
  variable_set('site_frontpage', 'home');
}

/**
 * Implements hook_date_format_types().
 */
function nems_homepage_date_format_types() {
  return array(
    'just_Y' => t('Year only'),
  );
}

/**
 * Check if the content type exists, otherwise create it.
 *
 * @param string $ct
 *   Content type machine name.
 */
function _nems_homepage_check_nems_content_type($ct) {
  $type = node_type_get_type($ct);

  if (!$type) {
    $type = array(
      'type' => $ct,
      'name' => $ct,
      'base' => 'node_content',
      'description' => '',
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
    );

    $type = node_type_set_defaults($type);
    node_type_save($type);
    $type = node_type_get_type($ct);
  }

  return $type->type;
}

/**
 * Implements hook_post_features_enable_feature().
 */
function nems_homepage_post_features_enable_feature($component) {
  switch ($component) {
    case 'field_base':
      // Revert the field component, it seems it is not ready
      // after it's enabled.
      features_revert(array('nems_homepage' => array($component)));
      break;
  }
}

/**
 * Helper function to create "fake" isntances of exported field bases.
 *
 * @param string $component
 *   Feature component name.
 */
function _nems_homepage_create_instances($component) {
  // Create a content type if it doesn't exist already.
  if ($component == 'field_base') {
    $type_name = 'nems_homepage_fs';
    $type = node_type_load($type_name);
    if (!$type) {
      $type = array(
        'type' => $type_name,
        'name' => t('Field instances'),
        'base' => 'node_content',
        'description' => t('Instantiate fields'),
        'custom' => 1,
        'modified' => 1,
        'locked' => 0,
        'disabled' => 1,
      );

      $type = node_type_set_defaults($type);
      node_type_save($type);
    }

    // Get fields from the features file.
    $fields = call_user_func_array('nems_homepage_field_default_field_bases', array(''));

    // Loop through the fields and build "fake" instances.
    foreach ($fields as $field_name => $field_options) {
      $exist = field_info_instance('node', $field_name, $type->type);
      // Only work with unlocked fields and check for existing instances.
      if ($field_options['locked'] == 0 && $exist === NULL) {
        $instance = array(
          'field_name' => $field_name,
          'entity_type' => 'node',
          'bundle' => $type->type,
          'label' => 'default instance',
          'description' => t('A default instance'),
          'required' => 0,
        );
        field_create_instance($instance);
      }
    }
  }
}

/**
 * Implements hook_filter_info().
 */
function nems_homepage_filter_info() {
  $filters['filter_basepath'] = array(
    'title' => t('Base path'),
    'description' => t('Use it to transform the leading slash of a link with the drupal base_path()'),
    'process callback' => '_nems_homepage_filter_basepath',
  );

  return $filters;
}

/**
 * Filter callback.
 */
function _nems_homepage_filter_basepath($text, $filter, $format, $langcode, $cache, $cache_id) {
  // Add the base path to leading slash links.
  $link = 'href="/';
  $img = 'src="/';
  $text = str_replace($link, substr($link, 0, -1) . base_path(), $text);
  $text = str_replace($img, substr($img, 0, -1) . base_path(), $text);

  return $text;
}

/**
 * Delete the default pages.
 */
function _nems_homepage_delete_defaults() {
  $nids = variable_get('nems_homepage_default_pages_nids');
  if (is_array($nids)) {
    foreach ($nids as $nid) {
      node_delete($nid);
    }
  }
}

/**
 * Get the existing instances of fields.
 *
 * @param string $field_name
 *   Select or topic for the moment.
 *
 * @return array
 *   instances
 */
function _nems_homepage_get_instances($field_name) {
  // Get instances per field.
  $instances = array();
  if ($field_name) {
    $content_types = node_type_get_types();
    $instances = array();
    // We loop through the list of content types to find all the instances.
    foreach ($content_types as $machine_name => $content_type) {
      $exist = field_info_instance('node', $field_name, $machine_name);
      if ($exist !== NULL) {
        $instances[] = $exist['bundle'];
      }
    }
  }
  return $instances;
}
